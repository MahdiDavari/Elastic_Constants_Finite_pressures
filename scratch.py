import numpy as np
e=-0.01
post_perovskite=[[2.4723811499996495,  0.0000000000000000,  0.0000000000000000],
                 [1.2361905749998248,  4.0498106311729405,  0.0000000000000000],
                 [0.0000000000000000,  0.0000000000000000,  6.1356913942619702]]

a1 = [2.4723811499996495,  0.0000000000000000,  0.0000000000000000]
a2 = [1.2361905749998248,  4.0498106311729405,  0.0000000000000000]
a3 = [0.0000000000000000,  0.0000000000000000,  6.1356913942619702]


unity=np.array([[1, 0, 0],
      [0 , 1, 0],
      [0 , 0, 1]])

d1=[[1+e, 0, 0],
    [0  , 1, 0],
    [0  , 0, 1]]

d2=[[1  , 0, 0],
    [0  , 1+e, 0],
    [0  , 0, 1]]

d3=[[1  , 0, 0],
    [0  , 1, 0],
    [0  , 0, 1+e]]

d4=[[1/((1-e**2)**(1/3)), 0.00000000000000000, 0.00000000000000000],
    [0.00000000000000000, 1/((1-e**2)**(1/3)), e/((1-e**2)**(1/3))],
    [0.00000000000000000, e/((1-e**2)**(1/3)), 1/((1-e**2)**(1/3))]]


d5=[[1/((1-e**2)**(1/3)), 0.00000000000000000, e/((1-e**2)**(1/3))],
    [0.00000000000000000, 1/((1-e**2)**(1/3)), 0.00000000000000000],
    [e/((1-e**2)**(1/3)), 0.00000000000000000, 1/((1-e**2)**(1/3))]]

d6=[[1/((1-e**2)**(1/3)), e/((1-e**2)**(1/3)), 0.00000000000000000],
    [e/((1-e**2)**(1/3)), 1/((1-e**2)**(1/3)), 0.00000000000000000],
    [0.00000000000000000, 0.00000000000000000, 1/((1-e**2)**(1/3))]]

numd6=np.array([[1/((1-e**2)**(1/3)), e/((1-e**2)**(1/3)), 0.00000000000000000],
    [e/((1-e**2)**(1/3)), 1/((1-e**2)**(1/3)), 0.00000000000000000],
    [0.00000000000000000, 0.00000000000000000, 1/((1-e**2)**(1/3))]])

d7=[[(1+e)/((1-e**2)**(1/3)), 0.000000000000000000000, 0.00000000000000000],
    [0.000000000000000000000, (1-e)/((1-e**2)**(1/3)), 0.00000000000000000],
    [0.000000000000000000000, 0.000000000000000000000, 1/((1-e**2)**(1/3))]]

d8=[[(1+e)/((1-e**2)**(1/3)), 0.00000000000000000, 0.000000000000000000000],
    [0.000000000000000000000, 1/((1-e**2)**(1/3)), 0.000000000000000000000],
    [0.000000000000000000000, 0.00000000000000000, (1-e)/((1-e**2)**(1/3))]]


d9=[[1/((1-e**2)**(1/3)), 0.000000000000000000000, 0.000000000000000000000],
    [0.00000000000000000, (1+e)/((1+e**2)**(1/3)), 0.000000000000000000000],
    [0.00000000000000000, 0.000000000000000000000, (1-e)/((1-e**2)**(1/3))]]

shear_distortion =  [[1.000, e/2.0, e/2.0],
                     [e/2.0, 1.000, e/2.0],
                     [e/2.0, e/2.0, 1.000]]

print(np.matmul(shear_distortion,a1))
print(np.matmul(shear_distortion,a2))
print(np.matmul(shear_distortion,a3))

                    
#
# # For Orthohombic Lattice:
# sig1 = c11*e
# sig2 = c22*e
# sig3 = c33*e
# sig4 = c44*e/((1-e**2)**(1/3))
# sig5 = c55*e/((1-e**2)**(1/3))
# sig6 = c66*e/((1-e**2)**(1/3))
#
# #from Def_7
# sig1 = c11*((1+e)/((1-e**2)**(1/3))-1) + c12*((1-e)/((1-e**2)**(1/3))-1) + c13*(1/((1-e**2)**(1/3))-1)
# sig2 = c12*((1+e)/((1-e**2)**(1/3))-1) + c22*((1-e)/((1-e**2)**(1/3))-1) + c23*(1/((1-e**2)**(1/3))-1)
# sig3 = c13*((1+e)/((1-e**2)**(1/3))-1) + c23*((1-e)/((1-e**2)**(1/3))-1) + c33*(1/((1-e**2)**(1/3))-1)
#
# #from Def_8
# sig1 = c11*((1+e)/((1-e**2)**(1/3))-1) + c12*(1/((1-e**2)**(1/3))-1) + c13*((1-e)/((1-e**2)**(1/3))-1)
# sig2 = c12*((1+e)/((1-e**2)**(1/3))-1) + c22*(1/((1-e**2)**(1/3))-1) + c23*((1-e)/((1-e**2)**(1/3))-1)
# sig3 = c13*((1+e)/((1-e**2)**(1/3))-1) + c23*(1/((1-e**2)**(1/3))-1) + c33*((1-e)/((1-e**2)**(1/3))-1)
#
#
# #from Def_9
# sig1 = c11*(1/((1-e**2)**(1/3))-1) + c12*((1+e)/((1+e**2)**(1/3))-1) + c13*((1-e)/((1-e**2)**(1/3))-1)
# sig2 = c12*(1/((1-e**2)**(1/3))-1) + c22*((1+e)/((1+e**2)**(1/3))-1) + c23*((1-e)/((1-e**2)**(1/3))-1)
# sig3 = c13*(1/((1-e**2)**(1/3))-1) + c23*((1+e)/((1+e**2)**(1/3))-1) + c33*((1-e)/((1-e**2)**(1/3))-1)
#
#

# c11 = 1268
# c22 = 943
# c33 = 1244
# c12   = 424
#
# # 84.452 (kB) =  12680*0.01003366891128565+  c12*(-0.009966997799828903)
# # -51.945  =  c12*0.010033668911285654+   9430*(-0.009966997799828903)
# # 18.964  =  c13*0.010033668911285654+   c23*(-0.009966997799828903)
#
# c13   336
#
# 93.64377 =    12680*((1+e)/((1-e**2)**(1/3))-1) + c13*((1-e)/((1-e**2)**(1/3))-1)
# 6.5      =    4240*((1+e)/((1-e**2)**(1/3))-1) + c23*((1-e)/((1-e**2)**(1/3))-1)
# 91.131   =    c13*((1+e)/((1-e**2)**(1/3))-1) + 12440*((1-e)/((1-e**2)**(1/3))-1)
#
#
#
# c23  481
#
# 18.6254100 = 4240*((1+e)/((1+e**2)**(1/3))-1) + c13*((1-e)/((1-e**2)**(1/3))-1)
#
#
# 45.8040750 = 9430*((1+e)/((1+e**2)**(1/3))-1) + c23*((1-e)/((1-e**2)**(1/3))-1)
# -21.848415 = c23*((1+e)/((1+e**2)**(1/3))-1) + 12440*((1-e)/((1-e**2)**(1/3))-1)
#
# c44 = 301
# c55 = 382
# c66 = 434
#
#
#
# Post-perovskiteâ€  1,252 929 1,233 414 325 478 277 266 408
#
#
#
# print(numd6-unity)
# print()
#
#
# numpy.matmul(d1, post_perovskite)
# a=0
# for i in [d1, d2, d3, d4, d5, d6, d7, d8, d9]:
#     a+=1
#     with open('POSCAR'+str(a),'a+') as f:
#
#         # f.write(' '.join(map(str,numpy.matmul(d1, post_perovskite))))
#         # (numpy.matmul(d1, post_perovskite)).strip('[,]'))
#         f.write(' Mg Si O                                                     '+'\n')
#         f.write('    1.00000000000000                                         '+'\n')
#         f.write('\n'.join(' '.join(str(cell) for cell in row) for row in numpy.matmul(i, post_perovskite))+'\n')
#         # f.write('\n')
#         f.write('    Mg   Si   O                                              '+'\n')
#         f.write('    2    2    6                                              '+'\n')
#         f.write('Direct                                                       '+'\n')
#         f.write('   0.7469239890883586  0.5061520218232616  0.2500000000000000'+'\n')
#         f.write('   0.2530760109116414  0.4938479781767384  0.7500000000000000'+'\n')
#         f.write('   0.0000000000000000  0.0000000000000000  0.0000000000000000'+'\n')
#         f.write('   0.0000000000000000  0.0000000000000000  0.5000000000000000'+'\n')
#         f.write('   0.0733163031647734  0.8533673936704460  0.2500000000000000'+'\n')
#         f.write('   0.9266836968352266  0.1466326063295540  0.7500000000000000'+'\n')
#         f.write('   0.3639887016191494  0.2720225967617154  0.4408192873872139'+'\n')
#         f.write('   0.6360112983808577  0.7279774032382846  0.5591806826127907'+'\n')
#         f.write('   0.6360112983808577  0.7279774032382846  0.9408193173872093'+'\n')
#         f.write('   0.3639887016191494  0.2720225967617154  0.0559210962607147'+'\n')